// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package factory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FactoryMetaData contains all meta data concerning the Factory contract.
var FactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAddressIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"_fees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610081575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100789190610198565b60405180910390fd5b6100908161009660201b60201c565b506101b1565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018282610159565b9050919050565b61019281610178565b82525050565b5f6020820190506101ab5f830184610189565b92915050565b61445f806101be5f395ff3fe608060405234801561000f575f5ffd5b5060043610610086575f3560e01c8063a8ac93f511610059578063a8ac93f514610104578063af51b4db14610134578063b88c914814610164578063f2fde38b1461019457610086565b8063531aa03e1461008a578063715018a6146100ba57806389035730146100c45780638da5cb5b146100e6575b5f5ffd5b6100a4600480360381019061009f9190610d5d565b6101b0565b6040516100b19190610daa565b60405180910390f35b6100c2610251565b005b6100cc610264565b6040516100dd959493929190610de0565b60405180910390f35b6100ee610311565b6040516100fb9190610daa565b60405180910390f35b61011e60048036038101906101199190610e31565b610339565b60405161012b9190610e5c565b60405180910390f35b61014e60048036038101906101499190610fdb565b610358565b60405161015b9190610daa565b60405180910390f35b61017e60048036038101906101799190610e31565b610735565b60405161018b9190610e5c565b60405180910390f35b6101ae60048036038101906101a99190610e31565b610789565b005b5f60065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b61025961080d565b6102625f610894565b565b5f805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900462ffffff16905085565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6005602052805f5260405f205f915054906101000a900462ffffff1681565b5f61036161080d565b5f73ffffffffffffffffffffffffffffffffffffffff1660065f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461045d576040517fa13dadba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156104c557505f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b6104fb576040517fdc2e5e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161061053757868861053a565b87875b915091505f61054d3084848a8a8a610957565b90508060065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508462ffffff168273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f97d23878912fda7f82bd5a8502f2c6e9086f5a4728f9054627788b3162f86ced8460405161071e9190610daa565b60405180910390a480935050505095945050505050565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900462ffffff169050919050565b61079161080d565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610801575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107f89190610daa565b60405180910390fd5b61080a81610894565b50565b610815610cd1565b73ffffffffffffffffffffffffffffffffffffffff16610833610311565b73ffffffffffffffffffffffffffffffffffffffff161461089257610856610cd1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108899190610daa565b60405180910390fd5b565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f5f84843060405161096890610cd8565b610974939291906110ea565b604051809103905ff08015801561098d573d5f5f3e3d5ffd5b5090506040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff168152505f5f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548162ffffff021916908362ffffff1602179055509050505f878785604051602001610b699392919061112d565b60405160208183030381529060405280519060200120604051610b8b90610ce5565b8190604051809103905ff5905080158015610ba8573d5f5f3e3d5ffd5b5090508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b8152600401610be49190610daa565b5f604051808303815f87803b158015610bfb575f5ffd5b505af1158015610c0d573d5f5f3e3d5ffd5b505050505f5f5f82015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549062ffffff0219169055505080925050509695505050505050565b5f33905090565b6118cb8061116383390190565b6119fc80612a2e83390190565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610d2c82610d03565b9050919050565b610d3c81610d22565b8114610d46575f5ffd5b50565b5f81359050610d5781610d33565b92915050565b5f5f60408385031215610d7357610d72610cfb565b5b5f610d8085828601610d49565b9250506020610d9185828601610d49565b9150509250929050565b610da481610d22565b82525050565b5f602082019050610dbd5f830184610d9b565b92915050565b5f62ffffff82169050919050565b610dda81610dc3565b82525050565b5f60a082019050610df35f830188610d9b565b610e006020830187610d9b565b610e0d6040830186610d9b565b610e1a6060830185610d9b565b610e276080830184610dd1565b9695505050505050565b5f60208284031215610e4657610e45610cfb565b5b5f610e5384828501610d49565b91505092915050565b5f602082019050610e6f5f830184610dd1565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ec382610e7d565b810181811067ffffffffffffffff82111715610ee257610ee1610e8d565b5b80604052505050565b5f610ef4610cf2565b9050610f008282610eba565b919050565b5f67ffffffffffffffff821115610f1f57610f1e610e8d565b5b610f2882610e7d565b9050602081019050919050565b828183375f83830152505050565b5f610f55610f5084610f05565b610eeb565b905082815260208101848484011115610f7157610f70610e79565b5b610f7c848285610f35565b509392505050565b5f82601f830112610f9857610f97610e75565b5b8135610fa8848260208601610f43565b91505092915050565b610fba81610dc3565b8114610fc4575f5ffd5b50565b5f81359050610fd581610fb1565b92915050565b5f5f5f5f5f60a08688031215610ff457610ff3610cfb565b5b5f61100188828901610d49565b955050602061101288828901610d49565b945050604086013567ffffffffffffffff81111561103357611032610cff565b5b61103f88828901610f84565b935050606086013567ffffffffffffffff8111156110605761105f610cff565b5b61106c88828901610f84565b925050608061107d88828901610fc7565b9150509295509295909350565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6110bc8261108a565b6110c68185611094565b93506110d68185602086016110a4565b6110df81610e7d565b840191505092915050565b5f6060820190508181035f83015261110281866110b2565b9050818103602083015261111681856110b2565b90506111256040830184610d9b565b949350505050565b5f6060820190506111405f830186610d9b565b61114d6020830185610d9b565b61115a6040830184610dd1565b94935050505056fe608060405234801561000f575f5ffd5b506040516118cb3803806118cb83398181016040528101906100319190610348565b808383816003908161004391906105e0565b50806004908161005391906105e0565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100c6575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100bd91906106be565b60405180910390fd5b6100d5816100de60201b60201c565b505050506106d7565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610200826101ba565b810181811067ffffffffffffffff8211171561021f5761021e6101ca565b5b80604052505050565b5f6102316101a1565b905061023d82826101f7565b919050565b5f67ffffffffffffffff82111561025c5761025b6101ca565b5b610265826101ba565b9050602081019050919050565b8281835e5f83830152505050565b5f61029261028d84610242565b610228565b9050828152602081018484840111156102ae576102ad6101b6565b5b6102b9848285610272565b509392505050565b5f82601f8301126102d5576102d46101b2565b5b81516102e5848260208601610280565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610317826102ee565b9050919050565b6103278161030d565b8114610331575f5ffd5b50565b5f815190506103428161031e565b92915050565b5f5f5f6060848603121561035f5761035e6101aa565b5b5f84015167ffffffffffffffff81111561037c5761037b6101ae565b5b610388868287016102c1565b935050602084015167ffffffffffffffff8111156103a9576103a86101ae565b5b6103b5868287016102c1565b92505060406103c686828701610334565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061041e57607f821691505b602082108103610431576104306103da565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610458565b61049d8683610458565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104e16104dc6104d7846104b5565b6104be565b6104b5565b9050919050565b5f819050919050565b6104fa836104c7565b61050e610506826104e8565b848454610464565b825550505050565b5f5f905090565b610525610516565b6105308184846104f1565b505050565b5b81811015610553576105485f8261051d565b600181019050610536565b5050565b601f8211156105985761056981610437565b61057284610449565b81016020851015610581578190505b61059561058d85610449565b830182610535565b50505b505050565b5f82821c905092915050565b5f6105b85f198460080261059d565b1980831691505092915050565b5f6105d083836105a9565b9150826002028217905092915050565b6105e9826103d0565b67ffffffffffffffff811115610602576106016101ca565b5b61060c8254610407565b610617828285610557565b5f60209050601f831160018114610648575f8415610636578287015190505b61064085826105c5565b8655506106a7565b601f19841661065686610437565b5f5b8281101561067d57848901518255600182019150602085019450602081019050610658565b8683101561069a5784890151610696601f8916826105a9565b8355505b6001600288020188555050505b505050505050565b6106b88161030d565b82525050565b5f6020820190506106d15f8301846106af565b92915050565b6111e7806106e45f395ff3fe608060405234801561000f575f5ffd5b50600436106100e8575f3560e01c8063715018a61161008a5780639dc29fac116100645780639dc29fac14610238578063a9059cbb14610254578063dd62ed3e14610284578063f2fde38b146102b4576100e8565b8063715018a6146101f25780638da5cb5b146101fc57806395d89b411461021a576100e8565b806323b872dd116100c657806323b872dd14610158578063313ce5671461018857806340c10f19146101a657806370a08231146101c2576100e8565b806306fdde03146100ec578063095ea7b31461010a57806318160ddd1461013a575b5f5ffd5b6100f46102d0565b6040516101019190610e60565b60405180910390f35b610124600480360381019061011f9190610f11565b610360565b6040516101319190610f69565b60405180910390f35b610142610382565b60405161014f9190610f91565b60405180910390f35b610172600480360381019061016d9190610faa565b61038b565b60405161017f9190610f69565b60405180910390f35b6101906103b9565b60405161019d9190611015565b60405180910390f35b6101c060048036038101906101bb9190610f11565b6103c1565b005b6101dc60048036038101906101d7919061102e565b6103d7565b6040516101e99190610f91565b60405180910390f35b6101fa61041c565b005b61020461042f565b6040516102119190611068565b60405180910390f35b610222610457565b60405161022f9190610e60565b60405180910390f35b610252600480360381019061024d9190610f11565b6104e7565b005b61026e60048036038101906102699190610f11565b6104fd565b60405161027b9190610f69565b60405180910390f35b61029e60048036038101906102999190611081565b61051f565b6040516102ab9190610f91565b60405180910390f35b6102ce60048036038101906102c9919061102e565b6105a1565b005b6060600380546102df906110ec565b80601f016020809104026020016040519081016040528092919081815260200182805461030b906110ec565b80156103565780601f1061032d57610100808354040283529160200191610356565b820191905f5260205f20905b81548152906001019060200180831161033957829003601f168201915b5050505050905090565b5f5f61036a610625565b905061037781858561062c565b600191505092915050565b5f600254905090565b5f5f610395610625565b90506103a285828561063e565b6103ad8585856106d0565b60019150509392505050565b5f6012905090565b6103c96107c0565b6103d38282610847565b5050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6104246107c0565b61042d5f6108c6565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610466906110ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610492906110ec565b80156104dd5780601f106104b4576101008083540402835291602001916104dd565b820191905f5260205f20905b8154815290600101906020018083116104c057829003601f168201915b5050505050905090565b6104ef6107c0565b6104f98282610989565b5050565b5f5f610507610625565b90506105148185856106d0565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6105a96107c0565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610619575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106109190611068565b60405180910390fd5b610622816108c6565b50565b5f33905090565b6106398383836001610a08565b505050565b5f610649848461051f565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106ca57818110156106bb578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016106b29392919061111c565b60405180910390fd5b6106c984848484035f610a08565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610740575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107379190611068565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107b0575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016107a79190611068565b60405180910390fd5b6107bb838383610bd7565b505050565b6107c8610625565b73ffffffffffffffffffffffffffffffffffffffff166107e661042f565b73ffffffffffffffffffffffffffffffffffffffff161461084557610809610625565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161083c9190611068565b60405180910390fd5b565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108b7575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108ae9190611068565b60405180910390fd5b6108c25f8383610bd7565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109f9575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109f09190611068565b60405180910390fd5b610a04825f83610bd7565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a78575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a6f9190611068565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ae8575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610adf9190611068565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610bd1578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610bc89190610f91565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c27578060025f828254610c1b919061117e565b92505081905550610cf5565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610cb0578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610ca79392919061111c565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d3c578060025f8282540392505081905550610d86565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610de39190610f91565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e3282610df0565b610e3c8185610dfa565b9350610e4c818560208601610e0a565b610e5581610e18565b840191505092915050565b5f6020820190508181035f830152610e788184610e28565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ead82610e84565b9050919050565b610ebd81610ea3565b8114610ec7575f5ffd5b50565b5f81359050610ed881610eb4565b92915050565b5f819050919050565b610ef081610ede565b8114610efa575f5ffd5b50565b5f81359050610f0b81610ee7565b92915050565b5f5f60408385031215610f2757610f26610e80565b5b5f610f3485828601610eca565b9250506020610f4585828601610efd565b9150509250929050565b5f8115159050919050565b610f6381610f4f565b82525050565b5f602082019050610f7c5f830184610f5a565b92915050565b610f8b81610ede565b82525050565b5f602082019050610fa45f830184610f82565b92915050565b5f5f5f60608486031215610fc157610fc0610e80565b5b5f610fce86828701610eca565b9350506020610fdf86828701610eca565b9250506040610ff086828701610efd565b9150509250925092565b5f60ff82169050919050565b61100f81610ffa565b82525050565b5f6020820190506110285f830184611006565b92915050565b5f6020828403121561104357611042610e80565b5b5f61105084828501610eca565b91505092915050565b61106281610ea3565b82525050565b5f60208201905061107b5f830184611059565b92915050565b5f5f6040838503121561109757611096610e80565b5b5f6110a485828601610eca565b92505060206110b585828601610eca565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061110357607f821691505b602082108103611116576111156110bf565b5b50919050565b5f60608201905061112f5f830186611059565b61113c6020830185610f82565b6111496040830184610f82565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61118882610ede565b915061119383610ede565b92508282019050808211156111ab576111aa611151565b5b9291505056fea26469706673582212200ff52428adf4fb258d2613ecb9f1a797504fedc523f527f26f7242fe1b6bc68d64736f6c634300081c0033610120604052348015610010575f5ffd5b503373ffffffffffffffffffffffffffffffffffffffff1663890357306040518163ffffffff1660e01b815260040160a060405180830381865afa15801561005a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061007e91906101fc565b8062ffffff166101009062ffffff168152508173ffffffffffffffffffffffffffffffffffffffff1660e09073ffffffffffffffffffffffffffffffffffffffff168152508273ffffffffffffffffffffffffffffffffffffffff1660c09073ffffffffffffffffffffffffffffffffffffffff168152508373ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff168152508473ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152505050505050610273565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101938261016a565b9050919050565b6101a381610189565b81146101ad575f5ffd5b50565b5f815190506101be8161019a565b92915050565b5f62ffffff82169050919050565b6101db816101c4565b81146101e5575f5ffd5b50565b5f815190506101f6816101d2565b92915050565b5f5f5f5f5f60a0868803121561021557610214610166565b5b5f610222888289016101b0565b9550506020610233888289016101b0565b9450506040610244888289016101b0565b9350506060610255888289016101b0565b9250506080610266888289016101e8565b9150509295509295909350565b60805160a05160c05160e051610100516116c061033c5f395f8181610ea3015261112301525f81816105950152818161076501528181610ac601528181610ce90152610f2401525f81816103b101528181610419015281816105e10152818161088c01528181610a2801528181610c4a01528181610e7d015261106701525f81816102c3015281816103d2015281816103f80152818161067f015281816107f00152818161098a01528181610bac0152610fb601525f81816105ba0152610e5901526116c05ff3fe608060405234801561000f575f5ffd5b50600436106100e8575f3560e01c80639cd441da1161008a578063d3fdbbb511610064578063d3fdbbb514610212578063d813478e14610242578063ddca3f4314610273578063ef01a1c314610291576100e8565b80639cd441da146101ba578063c45a0155146101d6578063d21220a7146101f4576100e8565b806388cc58e4116100c657806388cc58e41461014457806390dc67e61461016257806399215eef146101805780639c8f9f231461019e576100e8565b80630dfe1681146100ec5780632bec60fe1461010a5780635fcbd28514610126575b5f5ffd5b6100f46102c1565b60405161010191906111e7565b60405180910390f35b610124600480360381019061011f919061126c565b6102e5565b005b61012e610593565b60405161013b91906111e7565b60405180910390f35b61014c6105b7565b60405161015991906111e7565b60405180910390f35b61016a6105de565b60405161017791906112cb565b60405180910390f35b61018861067c565b60405161019591906112cb565b60405180910390f35b6101b860048036038101906101b391906112e4565b61071a565b005b6101d460048036038101906101cf919061130f565b61097a565b005b6101de610e57565b6040516101eb91906111e7565b60405180910390f35b6101fc610e7b565b60405161020991906111e7565b60405180910390f35b61022c6004803603810190610227919061134d565b610e9f565b60405161023991906112cb565b60405180910390f35b61025c600480360381019061025791906112e4565b610f1f565b60405161026a92919061139d565b60405180910390f35b61027b611121565b60405161028891906113e1565b60405180910390f35b6102ab60048036038101906102a691906113fa565b611145565b6040516102b891906112cb565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b5f831161031e576040517f340dabef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f8261033a5761032d6105de565b61033561067c565b61034b565b61034261067c565b61034a6105de565b5b915091505f61035b868484610e9f565b905084811015858290916103a6576040517f3fad68d000000000000000000000000000000000000000000000000000000000815260040161039d92919061139d565b60405180910390fd5b50505f5f856103f6577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610439565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000005b915091508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b815260040161047a93929190611438565b6020604051808303815f875af1158015610496573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104ba9190611481565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016104f69291906114ac565b6020604051808303815f875af1158015610512573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105369190611481565b503373ffffffffffffffffffffffffffffffffffffffff167f5aceb8ddbdcc435072e442e4dd594777e5575cb8c3e8ab1ff1e5b76d7aeaa6c4898589604051610581939291906114e2565b60405180910390a25050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161063891906111e7565b602060405180830381865afa158015610653573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610677919061152b565b905090565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106d691906111e7565b602060405180830381865afa1580156106f1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610715919061152b565b905090565b5f8111610753576040517f340dabef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f61075e83610f1f565b915091505f7f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b81526004016107c19291906114ac565b5f604051808303815f87803b1580156107d8575f5ffd5b505af11580156107ea573d5f5f3e3d5ffd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016108499291906114ac565b6020604051808303815f875af1158015610865573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108899190611481565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016108e59291906114ac565b6020604051808303815f875af1158015610901573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109259190611481565b503373ffffffffffffffffffffffffffffffffffffffff167fdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f28560405161096c91906112cb565b60405180910390a250505050565b5f61098361067c565b03610b51577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016109e593929190611438565b6020604051808303815f875af1158015610a01573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a259190611481565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a8393929190611438565b6020604051808303815f875af1158015610a9f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ac39190611481565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b8152600401610b1f9291906114ac565b5f604051808303815f87803b158015610b36575f5ffd5b505af1158015610b48573d5f5f3e3d5ffd5b50505050610e03565b5f610b5d836001611145565b90508082101581839091610ba8576040517ff9e88c81000000000000000000000000000000000000000000000000000000008152600401610b9f92919061139d565b60405180910390fd5b50507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610c0793929190611438565b6020604051808303815f875af1158015610c23573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c479190611481565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ca593929190611438565b6020604051808303815f875af1158015610cc1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ce59190611481565b505f7f000000000000000000000000000000000000000000000000000000000000000090505f610d1361067c565b858373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d81919061152b565b610d8b9190611583565b610d9591906115f1565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610dd29291906114ac565b5f604051808303815f87803b158015610de9575f5ffd5b505af1158015610dfb573d5f5f3e3d5ffd5b505050505050505b3373ffffffffffffffffffffffffffffffffffffffff167f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca8383604051610e4b92919061139d565b60405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f5f7f00000000000000000000000000000000000000000000000000000000000000006103e8610ecf9190611621565b62ffffff1685610edf9190611583565b90505f816103e886610ef19190611583565b610efb9190611657565b8483610f079190611583565b610f1191906115f1565b905080925050509392505050565b5f5f5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610faf919061152b565b90505f81857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161100d91906111e7565b602060405180830381865afa158015611028573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061104c919061152b565b6110569190611583565b61106091906115f1565b90505f82867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110be91906111e7565b602060405180830381865afa1580156110d9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110fd919061152b565b6111079190611583565b61111191906115f1565b9050818194509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f5f5f83611162576111556105de565b61115d61067c565b611173565b61116a61067c565b6111726105de565b5b915091505f85836111849190611657565b82876111909190611583565b61119a91906115f1565b905080935050505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6111d1826111a8565b9050919050565b6111e1816111c7565b82525050565b5f6020820190506111fa5f8301846111d8565b92915050565b5f5ffd5b5f819050919050565b61121681611204565b8114611220575f5ffd5b50565b5f813590506112318161120d565b92915050565b5f8115159050919050565b61124b81611237565b8114611255575f5ffd5b50565b5f8135905061126681611242565b92915050565b5f5f5f6060848603121561128357611282611200565b5b5f61129086828701611223565b93505060206112a186828701611223565b92505060406112b286828701611258565b9150509250925092565b6112c581611204565b82525050565b5f6020820190506112de5f8301846112bc565b92915050565b5f602082840312156112f9576112f8611200565b5b5f61130684828501611223565b91505092915050565b5f5f6040838503121561132557611324611200565b5b5f61133285828601611223565b925050602061134385828601611223565b9150509250929050565b5f5f5f6060848603121561136457611363611200565b5b5f61137186828701611223565b935050602061138286828701611223565b925050604061139386828701611223565b9150509250925092565b5f6040820190506113b05f8301856112bc565b6113bd60208301846112bc565b9392505050565b5f62ffffff82169050919050565b6113db816113c4565b82525050565b5f6020820190506113f45f8301846113d2565b92915050565b5f5f604083850312156114105761140f611200565b5b5f61141d85828601611223565b925050602061142e85828601611258565b9150509250929050565b5f60608201905061144b5f8301866111d8565b61145860208301856111d8565b61146560408301846112bc565b949350505050565b5f8151905061147b81611242565b92915050565b5f6020828403121561149657611495611200565b5b5f6114a38482850161146d565b91505092915050565b5f6040820190506114bf5f8301856111d8565b6114cc60208301846112bc565b9392505050565b6114dc81611237565b82525050565b5f6060820190506114f55f8301866112bc565b61150260208301856112bc565b61150f60408301846114d3565b949350505050565b5f815190506115258161120d565b92915050565b5f602082840312156115405761153f611200565b5b5f61154d84828501611517565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61158d82611204565b915061159883611204565b92508282026115a681611204565b915082820484148315176115bd576115bc611556565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6115fb82611204565b915061160683611204565b925082611616576116156115c4565b5b828204905092915050565b5f61162b826113c4565b9150611636836113c4565b9250828203905062ffffff81111561165157611650611556565b5b92915050565b5f61166182611204565b915061166c83611204565b925082820190508082111561168457611683611556565b5b9291505056fea2646970667358221220699c01f1500b19f452a2a87edc3a77c9b2f8566544d47abc50ce93ff598bd8f764736f6c634300081c0033a2646970667358221220423fe1bbbec274b7ac508d3911c26882b3acc43dc8e4af2690e9c93093815db864736f6c634300081c0033",
}

// FactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use FactoryMetaData.ABI instead.
var FactoryABI = FactoryMetaData.ABI

// FactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FactoryMetaData.Bin instead.
var FactoryBin = FactoryMetaData.Bin

// DeployFactory deploys a new Ethereum contract, binding an instance of Factory to it.
func DeployFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Factory, error) {
	parsed, err := FactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Factory{FactoryCaller: FactoryCaller{contract: contract}, FactoryTransactor: FactoryTransactor{contract: contract}, FactoryFilterer: FactoryFilterer{contract: contract}}, nil
}

// Factory is an auto generated Go binding around an Ethereum contract.
type Factory struct {
	FactoryCaller     // Read-only binding to the contract
	FactoryTransactor // Write-only binding to the contract
	FactoryFilterer   // Log filterer for contract events
}

// FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FactorySession struct {
	Contract     *Factory          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FactoryCallerSession struct {
	Contract *FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FactoryTransactorSession struct {
	Contract     *FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type FactoryRaw struct {
	Contract *Factory // Generic contract binding to access the raw methods on
}

// FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FactoryCallerRaw struct {
	Contract *FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FactoryTransactorRaw struct {
	Contract *FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFactory creates a new instance of Factory, bound to a specific deployed contract.
func NewFactory(address common.Address, backend bind.ContractBackend) (*Factory, error) {
	contract, err := bindFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Factory{FactoryCaller: FactoryCaller{contract: contract}, FactoryTransactor: FactoryTransactor{contract: contract}, FactoryFilterer: FactoryFilterer{contract: contract}}, nil
}

// NewFactoryCaller creates a new read-only instance of Factory, bound to a specific deployed contract.
func NewFactoryCaller(address common.Address, caller bind.ContractCaller) (*FactoryCaller, error) {
	contract, err := bindFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryCaller{contract: contract}, nil
}

// NewFactoryTransactor creates a new write-only instance of Factory, bound to a specific deployed contract.
func NewFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*FactoryTransactor, error) {
	contract, err := bindFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryTransactor{contract: contract}, nil
}

// NewFactoryFilterer creates a new log filterer instance of Factory, bound to a specific deployed contract.
func NewFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*FactoryFilterer, error) {
	contract, err := bindFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FactoryFilterer{contract: contract}, nil
}

// bindFactory binds a generic wrapper to an already deployed contract.
func bindFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Factory *FactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Factory.Contract.FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Factory *FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.Contract.FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Factory *FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Factory.Contract.FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Factory *FactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Factory *FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Factory *FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Factory.Contract.contract.Transact(opts, method, params...)
}

// Fees is a free data retrieval call binding the contract method 0xa8ac93f5.
//
// Solidity: function _fees(address pool) view returns(uint24 fee)
func (_Factory *FactoryCaller) Fees(opts *bind.CallOpts, pool common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Factory.contract.Call(opts, &out, "_fees", pool)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Fees is a free data retrieval call binding the contract method 0xa8ac93f5.
//
// Solidity: function _fees(address pool) view returns(uint24 fee)
func (_Factory *FactorySession) Fees(pool common.Address) (*big.Int, error) {
	return _Factory.Contract.Fees(&_Factory.CallOpts, pool)
}

// Fees is a free data retrieval call binding the contract method 0xa8ac93f5.
//
// Solidity: function _fees(address pool) view returns(uint24 fee)
func (_Factory *FactoryCallerSession) Fees(pool common.Address) (*big.Int, error) {
	return _Factory.Contract.Fees(&_Factory.CallOpts, pool)
}

// GetFee is a free data retrieval call binding the contract method 0xb88c9148.
//
// Solidity: function getFee(address pool) view returns(uint24)
func (_Factory *FactoryCaller) GetFee(opts *bind.CallOpts, pool common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Factory.contract.Call(opts, &out, "getFee", pool)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFee is a free data retrieval call binding the contract method 0xb88c9148.
//
// Solidity: function getFee(address pool) view returns(uint24)
func (_Factory *FactorySession) GetFee(pool common.Address) (*big.Int, error) {
	return _Factory.Contract.GetFee(&_Factory.CallOpts, pool)
}

// GetFee is a free data retrieval call binding the contract method 0xb88c9148.
//
// Solidity: function getFee(address pool) view returns(uint24)
func (_Factory *FactoryCallerSession) GetFee(pool common.Address) (*big.Int, error) {
	return _Factory.Contract.GetFee(&_Factory.CallOpts, pool)
}

// GetPool is a free data retrieval call binding the contract method 0x531aa03e.
//
// Solidity: function getPool(address token0, address token1) view returns(address)
func (_Factory *FactoryCaller) GetPool(opts *bind.CallOpts, token0 common.Address, token1 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Factory.contract.Call(opts, &out, "getPool", token0, token1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPool is a free data retrieval call binding the contract method 0x531aa03e.
//
// Solidity: function getPool(address token0, address token1) view returns(address)
func (_Factory *FactorySession) GetPool(token0 common.Address, token1 common.Address) (common.Address, error) {
	return _Factory.Contract.GetPool(&_Factory.CallOpts, token0, token1)
}

// GetPool is a free data retrieval call binding the contract method 0x531aa03e.
//
// Solidity: function getPool(address token0, address token1) view returns(address)
func (_Factory *FactoryCallerSession) GetPool(token0 common.Address, token1 common.Address) (common.Address, error) {
	return _Factory.Contract.GetPool(&_Factory.CallOpts, token0, token1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Factory *FactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Factory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Factory *FactorySession) Owner() (common.Address, error) {
	return _Factory.Contract.Owner(&_Factory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Factory *FactoryCallerSession) Owner() (common.Address, error) {
	return _Factory.Contract.Owner(&_Factory.CallOpts)
}

// Parameters is a free data retrieval call binding the contract method 0x89035730.
//
// Solidity: function parameters() view returns(address factory, address token0, address token1, address lpToken, uint24 fee)
func (_Factory *FactoryCaller) Parameters(opts *bind.CallOpts) (struct {
	Factory common.Address
	Token0  common.Address
	Token1  common.Address
	LpToken common.Address
	Fee     *big.Int
}, error) {
	var out []interface{}
	err := _Factory.contract.Call(opts, &out, "parameters")

	outstruct := new(struct {
		Factory common.Address
		Token0  common.Address
		Token1  common.Address
		LpToken common.Address
		Fee     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Factory = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Token0 = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Token1 = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.LpToken = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Fee = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Parameters is a free data retrieval call binding the contract method 0x89035730.
//
// Solidity: function parameters() view returns(address factory, address token0, address token1, address lpToken, uint24 fee)
func (_Factory *FactorySession) Parameters() (struct {
	Factory common.Address
	Token0  common.Address
	Token1  common.Address
	LpToken common.Address
	Fee     *big.Int
}, error) {
	return _Factory.Contract.Parameters(&_Factory.CallOpts)
}

// Parameters is a free data retrieval call binding the contract method 0x89035730.
//
// Solidity: function parameters() view returns(address factory, address token0, address token1, address lpToken, uint24 fee)
func (_Factory *FactoryCallerSession) Parameters() (struct {
	Factory common.Address
	Token0  common.Address
	Token1  common.Address
	LpToken common.Address
	Fee     *big.Int
}, error) {
	return _Factory.Contract.Parameters(&_Factory.CallOpts)
}

// CreatePool is a paid mutator transaction binding the contract method 0xaf51b4db.
//
// Solidity: function createPool(address token0, address token1, string name, string symbol, uint24 fee) returns(address)
func (_Factory *FactoryTransactor) CreatePool(opts *bind.TransactOpts, token0 common.Address, token1 common.Address, name string, symbol string, fee *big.Int) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "createPool", token0, token1, name, symbol, fee)
}

// CreatePool is a paid mutator transaction binding the contract method 0xaf51b4db.
//
// Solidity: function createPool(address token0, address token1, string name, string symbol, uint24 fee) returns(address)
func (_Factory *FactorySession) CreatePool(token0 common.Address, token1 common.Address, name string, symbol string, fee *big.Int) (*types.Transaction, error) {
	return _Factory.Contract.CreatePool(&_Factory.TransactOpts, token0, token1, name, symbol, fee)
}

// CreatePool is a paid mutator transaction binding the contract method 0xaf51b4db.
//
// Solidity: function createPool(address token0, address token1, string name, string symbol, uint24 fee) returns(address)
func (_Factory *FactoryTransactorSession) CreatePool(token0 common.Address, token1 common.Address, name string, symbol string, fee *big.Int) (*types.Transaction, error) {
	return _Factory.Contract.CreatePool(&_Factory.TransactOpts, token0, token1, name, symbol, fee)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Factory *FactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Factory *FactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _Factory.Contract.RenounceOwnership(&_Factory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Factory *FactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Factory.Contract.RenounceOwnership(&_Factory.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Factory *FactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Factory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Factory *FactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Factory.Contract.TransferOwnership(&_Factory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Factory *FactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Factory.Contract.TransferOwnership(&_Factory.TransactOpts, newOwner)
}

// FactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Factory contract.
type FactoryOwnershipTransferredIterator struct {
	Event *FactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FactoryOwnershipTransferred represents a OwnershipTransferred event raised by the Factory contract.
type FactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Factory *FactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Factory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FactoryOwnershipTransferredIterator{contract: _Factory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Factory *FactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Factory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FactoryOwnershipTransferred)
				if err := _Factory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Factory *FactoryFilterer) ParseOwnershipTransferred(log types.Log) (*FactoryOwnershipTransferred, error) {
	event := new(FactoryOwnershipTransferred)
	if err := _Factory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FactoryPoolCreatedIterator is returned from FilterPoolCreated and is used to iterate over the raw logs and unpacked data for PoolCreated events raised by the Factory contract.
type FactoryPoolCreatedIterator struct {
	Event *FactoryPoolCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FactoryPoolCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FactoryPoolCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FactoryPoolCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FactoryPoolCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FactoryPoolCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FactoryPoolCreated represents a PoolCreated event raised by the Factory contract.
type FactoryPoolCreated struct {
	Token0 common.Address
	Token1 common.Address
	Fee    *big.Int
	Pool   common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPoolCreated is a free log retrieval operation binding the contract event 0x97d23878912fda7f82bd5a8502f2c6e9086f5a4728f9054627788b3162f86ced.
//
// Solidity: event PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, address pool)
func (_Factory *FactoryFilterer) FilterPoolCreated(opts *bind.FilterOpts, token0 []common.Address, token1 []common.Address, fee []*big.Int) (*FactoryPoolCreatedIterator, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}
	var feeRule []interface{}
	for _, feeItem := range fee {
		feeRule = append(feeRule, feeItem)
	}

	logs, sub, err := _Factory.contract.FilterLogs(opts, "PoolCreated", token0Rule, token1Rule, feeRule)
	if err != nil {
		return nil, err
	}
	return &FactoryPoolCreatedIterator{contract: _Factory.contract, event: "PoolCreated", logs: logs, sub: sub}, nil
}

// WatchPoolCreated is a free log subscription operation binding the contract event 0x97d23878912fda7f82bd5a8502f2c6e9086f5a4728f9054627788b3162f86ced.
//
// Solidity: event PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, address pool)
func (_Factory *FactoryFilterer) WatchPoolCreated(opts *bind.WatchOpts, sink chan<- *FactoryPoolCreated, token0 []common.Address, token1 []common.Address, fee []*big.Int) (event.Subscription, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}
	var feeRule []interface{}
	for _, feeItem := range fee {
		feeRule = append(feeRule, feeItem)
	}

	logs, sub, err := _Factory.contract.WatchLogs(opts, "PoolCreated", token0Rule, token1Rule, feeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FactoryPoolCreated)
				if err := _Factory.contract.UnpackLog(event, "PoolCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoolCreated is a log parse operation binding the contract event 0x97d23878912fda7f82bd5a8502f2c6e9086f5a4728f9054627788b3162f86ced.
//
// Solidity: event PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, address pool)
func (_Factory *FactoryFilterer) ParsePoolCreated(log types.Log) (*FactoryPoolCreated, error) {
	event := new(FactoryPoolCreated)
	if err := _Factory.contract.UnpackLog(event, "PoolCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
